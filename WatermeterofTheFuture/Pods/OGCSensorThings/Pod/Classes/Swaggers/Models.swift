// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [Datastream]
            Decoders.addDecoder(clazz: [Datastream].self) { (source: AnyObject) -> [Datastream] in
                return Decoders.decode(clazz: [Datastream].self, source: source)
            }
			// Decoder for Datastream
            Decoders.addDecoder(clazz: Datastream.self) { (source: AnyObject) -> Datastream in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Datastream()
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.observedProperty = Decoders.decodeOptional(clazz: ObservedProperty.self, source: sourceDictionary["observedProperty"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.observations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["observations"])
                instance.thing = Decoders.decodeOptional(clazz: Thing.self, source: sourceDictionary["thing"])
                return instance
            }
			

			// Decoder for [Entity]
            Decoders.addDecoder(clazz: [Entity].self) { (source: AnyObject) -> [Entity] in
                return Decoders.decode(clazz: [Entity].self, source: source)
            }
			// Decoder for Entity
            Decoders.addDecoder(clazz: Entity.self) { (source: AnyObject) -> Entity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Entity()
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                return instance
            }
			

			// Decoder for [ObservedProperty]
            Decoders.addDecoder(clazz: [ObservedProperty].self) { (source: AnyObject) -> [ObservedProperty] in
                return Decoders.decode(clazz: [ObservedProperty].self, source: source)
            }
			// Decoder for ObservedProperty
            Decoders.addDecoder(clazz: ObservedProperty.self) { (source: AnyObject) -> ObservedProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ObservedProperty()
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.unitOfMeasurement = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["unitOfMeasurement"])
                instance.datastreams = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["datastreams"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.URI = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["URI"])
                return instance
            }
			

			// Decoder for [FeatureOfInterest]
            Decoders.addDecoder(clazz: [FeatureOfInterest].self) { (source: AnyObject) -> [FeatureOfInterest] in
                return Decoders.decode(clazz: [FeatureOfInterest].self, source: source)
            }
			// Decoder for FeatureOfInterest
            Decoders.addDecoder(clazz: FeatureOfInterest.self) { (source: AnyObject) -> FeatureOfInterest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FeatureOfInterest()
                instance.geometry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["geometry"])
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.observations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["observations"])
                return instance
            }
			

			// Decoder for [Observation]
            Decoders.addDecoder(clazz: [Observation].self) { (source: AnyObject) -> [Observation] in
                return Decoders.decode(clazz: [Observation].self, source: source)
            }
			// Decoder for Observation
            Decoders.addDecoder(clazz: Observation.self) { (source: AnyObject) -> Observation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Observation()
                instance.datastream = Decoders.decodeOptional(clazz: Datastream.self, source: sourceDictionary["datastream"])
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.featureOfInterest = Decoders.decodeOptional(clazz: FeatureOfInterest.self, source: sourceDictionary["featureOfInterest"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.resultType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultType"])
                instance.resultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultValue"])
                instance.sensor = Decoders.decodeOptional(clazz: Sensor.self, source: sourceDictionary["sensor"])
                return instance
            }
			

			// Decoder for [Thing]
            Decoders.addDecoder(clazz: [Thing].self) { (source: AnyObject) -> [Thing] in
                return Decoders.decode(clazz: [Thing].self, source: source)
            }
			// Decoder for Thing
            Decoders.addDecoder(clazz: Thing.self) { (source: AnyObject) -> Thing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Thing()
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.datastreams = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["datastreams"])
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                return instance
            }
			

			// Decoder for [Location]
            Decoders.addDecoder(clazz: [Location].self) { (source: AnyObject) -> [Location] in
                return Decoders.decode(clazz: [Location].self, source: source)
            }
			// Decoder for Location
            Decoders.addDecoder(clazz: Location.self) { (source: AnyObject) -> Location in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Location()
                instance.geometry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["geometry"])
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.things = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["things"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.time = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["time"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                return instance
            }
			

			// Decoder for [Sensor]
            Decoders.addDecoder(clazz: [Sensor].self) { (source: AnyObject) -> [Sensor] in
                return Decoders.decode(clazz: [Sensor].self, source: source)
            }
			// Decoder for Sensor
            Decoders.addDecoder(clazz: Sensor.self) { (source: AnyObject) -> Sensor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sensor()
                instance.metadata = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["metadata"])
                instance.selfLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["selfLink"])
                instance.navigationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["navigationLink"])
                instance.associationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["associationLink"])
                instance.ID = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"])
                instance.observations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["observations"])
                return instance
            }
			
        }
    }
}
