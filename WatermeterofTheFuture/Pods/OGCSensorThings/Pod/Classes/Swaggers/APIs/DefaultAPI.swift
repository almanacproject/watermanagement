//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func datastreamsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: DatastreamsResponse?, error: ErrorType?) -> Void)) {
        datastreamsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /Datastreams
     - Gets Datastreams, i.e., collections of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon).
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "resultTime" : "aeiou",
    "Thing@iot.navigationLink" : "aeiou",
    "Sensor@iot.navigationLink" : "aeiou",
    "unitOfMeasure" : "{}",
    "ObservedProperty" : {
      "Datastreams@iot.navigationLink" : "aeiou",
      "Datastreams" : [ "" ],
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "definition" : "aeiou"
    },
    "description" : "aeiou",
    "phenomenonTime" : "aeiou",
    "ObservedProperty@iot.navigationLink" : "aeiou",
    "observationType" : "aeiou",
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "observedArea" : "{}",
    "Observations@iot.navigationLink" : "aeiou",
    "Observations" : [ {
      "result" : "aeiou",
      "resultTime" : "2000-01-23T04:56:07.000+0000",
      "Datastream" : "",
      "FeatureOfInterest" : {
        "feature" : "aeiou",
        "encodingType" : "aeiou",
        "description" : "aeiou",
        "Observations@iot.navigationLink" : "aeiou",
        "Observations" : [ "" ]
      },
      "phenomenonTime" : "aeiou",
      "validTime" : "2000-01-23T04:56:07.000+0000",
      "FeatureOfInterest@iot.navigationLink" : "aeiou",
      "Datastream@iot.navigationLink" : "aeiou",
      "parameters" : "{}",
      "resultQuality" : "aeiou"
    } ],
    "Thing" : {
      "Datastreams@iot.navigationLink" : "aeiou",
      "Datastreams" : [ "" ],
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "Locations" : [ {
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "encodingType" : "aeiou",
        "Things" : [ "" ],
        "Things@iot.navigationLink" : "aeiou",
        "description" : "aeiou",
        "location" : "{}",
        "HistoricalLocations" : [ {
          "Thing@iot.navigationLink" : "aeiou",
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "Locations" : [ "" ],
          "time" : "aeiou",
          "Locations@iot.navigationLink" : "aeiou",
          "Thing" : ""
        } ],
        "HistoricalLocations@iot.navigationLink" : "aeiou"
      } ],
      "description" : "aeiou",
      "Locations@iot.navigationLink" : "aeiou",
      "HistoricalLocations" : [ "" ],
      "properties" : "{}",
      "HistoricalLocations@iot.navigationLink" : "aeiou"
    },
    "Sensor" : {
      "metadata" : "aeiou",
      "Datastreams@iot.navigationLink" : "aeiou",
      "Datastreams" : [ "" ],
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "encodingType" : "aeiou",
      "description" : "aeiou"
    }
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<DatastreamsResponse> 
     */
    public class func datastreamsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<DatastreamsResponse> {
        let path = "/Datastreams"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DatastreamsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter datastream: (body) The Datastream to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func datastreamsPost(datastream datastream: Datastream, completion: ((error: ErrorType?) -> Void)) {
        datastreamsPostWithRequestBuilder(datastream: datastream).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /Datastreams
     - Posts a new DataStream definition
     
     - parameter datastream: (body) The Datastream to add 

     - returns: RequestBuilder<Void> 
     */
    public class func datastreamsPostWithRequestBuilder(datastream datastream: Datastream) -> RequestBuilder<Void> {
        let path = "/Datastreams"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = datastream.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func featureOfInterestsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: FeatureOfInterestsResponse?, error: ErrorType?) -> Void)) {
        featureOfInterestsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /FeatureOfInterests
     - Gets Features or feature collections that represent the identifiable object(s) on which the sensor systems are making observations. In the case of an in-situ sensor or observations being attributes of the thing, the feature of interest could be the thing itself. For remote sensors, this may be the geographical area or volume that is being sensed.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "feature" : "aeiou",
    "encodingType" : "aeiou",
    "description" : "aeiou",
    "Observations@iot.navigationLink" : "aeiou",
    "Observations" : [ {
      "result" : "aeiou",
      "resultTime" : "2000-01-23T04:56:07.000+0000",
      "Datastream" : {
        "resultTime" : "aeiou",
        "Thing@iot.navigationLink" : "aeiou",
        "Sensor@iot.navigationLink" : "aeiou",
        "unitOfMeasure" : "{}",
        "ObservedProperty" : {
          "Datastreams@iot.navigationLink" : "aeiou",
          "Datastreams" : [ "" ],
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "definition" : "aeiou"
        },
        "description" : "aeiou",
        "phenomenonTime" : "aeiou",
        "ObservedProperty@iot.navigationLink" : "aeiou",
        "observationType" : "aeiou",
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "observedArea" : "{}",
        "Observations@iot.navigationLink" : "aeiou",
        "Observations" : [ "" ],
        "Thing" : {
          "Datastreams@iot.navigationLink" : "aeiou",
          "Datastreams" : [ "" ],
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "Locations" : [ {
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "encodingType" : "aeiou",
            "Things" : [ "" ],
            "Things@iot.navigationLink" : "aeiou",
            "description" : "aeiou",
            "location" : "{}",
            "HistoricalLocations" : [ {
              "Thing@iot.navigationLink" : "aeiou",
              "@iot.id" : "aeiou",
              "@iot.selLink" : "aeiou",
              "Locations" : [ "" ],
              "time" : "aeiou",
              "Locations@iot.navigationLink" : "aeiou",
              "Thing" : ""
            } ],
            "HistoricalLocations@iot.navigationLink" : "aeiou"
          } ],
          "description" : "aeiou",
          "Locations@iot.navigationLink" : "aeiou",
          "HistoricalLocations" : [ "" ],
          "properties" : "{}",
          "HistoricalLocations@iot.navigationLink" : "aeiou"
        },
        "Sensor" : {
          "metadata" : "aeiou",
          "Datastreams@iot.navigationLink" : "aeiou",
          "Datastreams" : [ "" ],
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "encodingType" : "aeiou",
          "description" : "aeiou"
        }
      },
      "FeatureOfInterest" : "",
      "phenomenonTime" : "aeiou",
      "validTime" : "2000-01-23T04:56:07.000+0000",
      "FeatureOfInterest@iot.navigationLink" : "aeiou",
      "Datastream@iot.navigationLink" : "aeiou",
      "parameters" : "{}",
      "resultQuality" : "aeiou"
    } ]
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<FeatureOfInterestsResponse> 
     */
    public class func featureOfInterestsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<FeatureOfInterestsResponse> {
        let path = "/FeatureOfInterests"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<FeatureOfInterestsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter featureOfInterest: (body) The FeatureOfInterest to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func featureOfInterestsPost(featureOfInterest featureOfInterest: FeatureOfInterest, completion: ((error: ErrorType?) -> Void)) {
        featureOfInterestsPostWithRequestBuilder(featureOfInterest: featureOfInterest).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /FeatureOfInterests
     - Posts a new Feature of Interest description
     
     - parameter featureOfInterest: (body) The FeatureOfInterest to add 

     - returns: RequestBuilder<Void> 
     */
    public class func featureOfInterestsPostWithRequestBuilder(featureOfInterest featureOfInterest: FeatureOfInterest) -> RequestBuilder<Void> {
        let path = "/FeatureOfInterests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = featureOfInterest.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func historicalLocationsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: HistoricalLocationsResponse?, error: ErrorType?) -> Void)) {
        historicalLocationsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /HistoricalLocations
     - Gets Historic Locations of a Thing. A Thing’s HistoricalLocation entity set provides the current (i.e., last known) and previous locations of the Thing with their time.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "Thing@iot.navigationLink" : "aeiou",
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "Locations" : [ {
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "encodingType" : "aeiou",
      "Things" : [ {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ {
          "resultTime" : "aeiou",
          "Thing@iot.navigationLink" : "aeiou",
          "Sensor@iot.navigationLink" : "aeiou",
          "unitOfMeasure" : "{}",
          "ObservedProperty" : {
            "Datastreams@iot.navigationLink" : "aeiou",
            "Datastreams" : [ "" ],
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "name" : "aeiou",
            "description" : "aeiou",
            "definition" : "aeiou"
          },
          "description" : "aeiou",
          "phenomenonTime" : "aeiou",
          "ObservedProperty@iot.navigationLink" : "aeiou",
          "observationType" : "aeiou",
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "observedArea" : "{}",
          "Observations@iot.navigationLink" : "aeiou",
          "Observations" : [ {
            "result" : "aeiou",
            "resultTime" : "2000-01-23T04:56:07.000+0000",
            "Datastream" : "",
            "FeatureOfInterest" : {
              "feature" : "aeiou",
              "encodingType" : "aeiou",
              "description" : "aeiou",
              "Observations@iot.navigationLink" : "aeiou",
              "Observations" : [ "" ]
            },
            "phenomenonTime" : "aeiou",
            "validTime" : "2000-01-23T04:56:07.000+0000",
            "FeatureOfInterest@iot.navigationLink" : "aeiou",
            "Datastream@iot.navigationLink" : "aeiou",
            "parameters" : "{}",
            "resultQuality" : "aeiou"
          } ],
          "Thing" : "",
          "Sensor" : {
            "metadata" : "aeiou",
            "Datastreams@iot.navigationLink" : "aeiou",
            "Datastreams" : [ "" ],
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "encodingType" : "aeiou",
            "description" : "aeiou"
          }
        } ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ "" ],
        "description" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "HistoricalLocations" : [ "" ],
        "properties" : "{}",
        "HistoricalLocations@iot.navigationLink" : "aeiou"
      } ],
      "Things@iot.navigationLink" : "aeiou",
      "description" : "aeiou",
      "location" : "{}",
      "HistoricalLocations" : [ "" ],
      "HistoricalLocations@iot.navigationLink" : "aeiou"
    } ],
    "time" : "aeiou",
    "Locations@iot.navigationLink" : "aeiou",
    "Thing" : ""
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<HistoricalLocationsResponse> 
     */
    public class func historicalLocationsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<HistoricalLocationsResponse> {
        let path = "/HistoricalLocations"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<HistoricalLocationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter historicLocation: (body) The HistoricalLocation to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func historicalLocationsPost(historicLocation historicLocation: HistoricalLocation, completion: ((error: ErrorType?) -> Void)) {
        historicalLocationsPostWithRequestBuilder(historicLocation: historicLocation).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /HistoricalLocations
     - Posts a new HistoricLocation description
     
     - parameter historicLocation: (body) The HistoricalLocation to add 

     - returns: RequestBuilder<Void> 
     */
    public class func historicalLocationsPostWithRequestBuilder(historicLocation historicLocation: HistoricalLocation) -> RequestBuilder<Void> {
        let path = "/HistoricalLocations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = historicLocation.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func locationsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: LocationsResponse?, error: ErrorType?) -> Void)) {
        locationsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /Locations
     - Gets Locations, i.e., registered absolute geographical position at a specific time point.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "encodingType" : "aeiou",
    "Things" : [ {
      "Datastreams@iot.navigationLink" : "aeiou",
      "Datastreams" : [ {
        "resultTime" : "aeiou",
        "Thing@iot.navigationLink" : "aeiou",
        "Sensor@iot.navigationLink" : "aeiou",
        "unitOfMeasure" : "{}",
        "ObservedProperty" : {
          "Datastreams@iot.navigationLink" : "aeiou",
          "Datastreams" : [ "" ],
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "definition" : "aeiou"
        },
        "description" : "aeiou",
        "phenomenonTime" : "aeiou",
        "ObservedProperty@iot.navigationLink" : "aeiou",
        "observationType" : "aeiou",
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "observedArea" : "{}",
        "Observations@iot.navigationLink" : "aeiou",
        "Observations" : [ {
          "result" : "aeiou",
          "resultTime" : "2000-01-23T04:56:07.000+0000",
          "Datastream" : "",
          "FeatureOfInterest" : {
            "feature" : "aeiou",
            "encodingType" : "aeiou",
            "description" : "aeiou",
            "Observations@iot.navigationLink" : "aeiou",
            "Observations" : [ "" ]
          },
          "phenomenonTime" : "aeiou",
          "validTime" : "2000-01-23T04:56:07.000+0000",
          "FeatureOfInterest@iot.navigationLink" : "aeiou",
          "Datastream@iot.navigationLink" : "aeiou",
          "parameters" : "{}",
          "resultQuality" : "aeiou"
        } ],
        "Thing" : "",
        "Sensor" : {
          "metadata" : "aeiou",
          "Datastreams@iot.navigationLink" : "aeiou",
          "Datastreams" : [ "" ],
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "encodingType" : "aeiou",
          "description" : "aeiou"
        }
      } ],
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "Locations" : [ "" ],
      "description" : "aeiou",
      "Locations@iot.navigationLink" : "aeiou",
      "HistoricalLocations" : [ {
        "Thing@iot.navigationLink" : "aeiou",
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ "" ],
        "time" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "Thing" : ""
      } ],
      "properties" : "{}",
      "HistoricalLocations@iot.navigationLink" : "aeiou"
    } ],
    "Things@iot.navigationLink" : "aeiou",
    "description" : "aeiou",
    "location" : "{}",
    "HistoricalLocations" : [ "" ],
    "HistoricalLocations@iot.navigationLink" : "aeiou"
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<LocationsResponse> 
     */
    public class func locationsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<LocationsResponse> {
        let path = "/Locations"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<LocationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter location: (body) The Location to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func locationsPost(location location: Location, completion: ((error: ErrorType?) -> Void)) {
        locationsPostWithRequestBuilder(location: location).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /Locations
     - Posts a new Location definition
     
     - parameter location: (body) The Location to add 

     - returns: RequestBuilder<Void> 
     */
    public class func locationsPostWithRequestBuilder(location location: Location) -> RequestBuilder<Void> {
        let path = "/Locations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = location.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func observationsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: ObservationsResponse?, error: ErrorType?) -> Void)) {
        observationsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /Observations
     - Gets Observation objects, i.e., objects representing the act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1]
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "result" : "aeiou",
    "resultTime" : "2000-01-23T04:56:07.000+0000",
    "Datastream" : {
      "resultTime" : "aeiou",
      "Thing@iot.navigationLink" : "aeiou",
      "Sensor@iot.navigationLink" : "aeiou",
      "unitOfMeasure" : "{}",
      "ObservedProperty" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "definition" : "aeiou"
      },
      "description" : "aeiou",
      "phenomenonTime" : "aeiou",
      "ObservedProperty@iot.navigationLink" : "aeiou",
      "observationType" : "aeiou",
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "observedArea" : "{}",
      "Observations@iot.navigationLink" : "aeiou",
      "Observations" : [ "" ],
      "Thing" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ {
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "encodingType" : "aeiou",
          "Things" : [ "" ],
          "Things@iot.navigationLink" : "aeiou",
          "description" : "aeiou",
          "location" : "{}",
          "HistoricalLocations" : [ {
            "Thing@iot.navigationLink" : "aeiou",
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "Locations" : [ "" ],
            "time" : "aeiou",
            "Locations@iot.navigationLink" : "aeiou",
            "Thing" : ""
          } ],
          "HistoricalLocations@iot.navigationLink" : "aeiou"
        } ],
        "description" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "HistoricalLocations" : [ "" ],
        "properties" : "{}",
        "HistoricalLocations@iot.navigationLink" : "aeiou"
      },
      "Sensor" : {
        "metadata" : "aeiou",
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "encodingType" : "aeiou",
        "description" : "aeiou"
      }
    },
    "FeatureOfInterest" : {
      "feature" : "aeiou",
      "encodingType" : "aeiou",
      "description" : "aeiou",
      "Observations@iot.navigationLink" : "aeiou",
      "Observations" : [ "" ]
    },
    "phenomenonTime" : "aeiou",
    "validTime" : "2000-01-23T04:56:07.000+0000",
    "FeatureOfInterest@iot.navigationLink" : "aeiou",
    "Datastream@iot.navigationLink" : "aeiou",
    "parameters" : "{}",
    "resultQuality" : "aeiou"
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<ObservationsResponse> 
     */
    public class func observationsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<ObservationsResponse> {
        let path = "/Observations"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ObservationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter observation: (body) The Observation to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func observationsPost(observation observation: Observation, completion: ((error: ErrorType?) -> Void)) {
        observationsPostWithRequestBuilder(observation: observation).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /Observations
     - Posts a new obervation pertaining to a given data stream
     
     - parameter observation: (body) The Observation to add 

     - returns: RequestBuilder<Void> 
     */
    public class func observationsPostWithRequestBuilder(observation observation: Observation) -> RequestBuilder<Void> {
        let path = "/Observations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = observation.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func observedPropertiesGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: ObservedPropertiesResponse?, error: ErrorType?) -> Void)) {
        observedPropertiesGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /ObservedProperties
     - Gets ObservedProprties, i.e., the phenomenon of a given observation.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "Datastreams@iot.navigationLink" : "aeiou",
    "Datastreams" : [ {
      "resultTime" : "aeiou",
      "Thing@iot.navigationLink" : "aeiou",
      "Sensor@iot.navigationLink" : "aeiou",
      "unitOfMeasure" : "{}",
      "ObservedProperty" : "",
      "description" : "aeiou",
      "phenomenonTime" : "aeiou",
      "ObservedProperty@iot.navigationLink" : "aeiou",
      "observationType" : "aeiou",
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "observedArea" : "{}",
      "Observations@iot.navigationLink" : "aeiou",
      "Observations" : [ {
        "result" : "aeiou",
        "resultTime" : "2000-01-23T04:56:07.000+0000",
        "Datastream" : "",
        "FeatureOfInterest" : {
          "feature" : "aeiou",
          "encodingType" : "aeiou",
          "description" : "aeiou",
          "Observations@iot.navigationLink" : "aeiou",
          "Observations" : [ "" ]
        },
        "phenomenonTime" : "aeiou",
        "validTime" : "2000-01-23T04:56:07.000+0000",
        "FeatureOfInterest@iot.navigationLink" : "aeiou",
        "Datastream@iot.navigationLink" : "aeiou",
        "parameters" : "{}",
        "resultQuality" : "aeiou"
      } ],
      "Thing" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ {
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "encodingType" : "aeiou",
          "Things" : [ "" ],
          "Things@iot.navigationLink" : "aeiou",
          "description" : "aeiou",
          "location" : "{}",
          "HistoricalLocations" : [ {
            "Thing@iot.navigationLink" : "aeiou",
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "Locations" : [ "" ],
            "time" : "aeiou",
            "Locations@iot.navigationLink" : "aeiou",
            "Thing" : ""
          } ],
          "HistoricalLocations@iot.navigationLink" : "aeiou"
        } ],
        "description" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "HistoricalLocations" : [ "" ],
        "properties" : "{}",
        "HistoricalLocations@iot.navigationLink" : "aeiou"
      },
      "Sensor" : {
        "metadata" : "aeiou",
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "encodingType" : "aeiou",
        "description" : "aeiou"
      }
    } ],
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "definition" : "aeiou"
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<ObservedPropertiesResponse> 
     */
    public class func observedPropertiesGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<ObservedPropertiesResponse> {
        let path = "/ObservedProperties"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ObservedPropertiesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter observedProperty: (body) The ObservedProperty to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func observedPropertiesPost(observedProperty observedProperty: ObservedProperty, completion: ((error: ErrorType?) -> Void)) {
        observedPropertiesPostWithRequestBuilder(observedProperty: observedProperty).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /ObservedProperties
     - Posts a new ObservedPropertyy
     
     - parameter observedProperty: (body) The ObservedProperty to add 

     - returns: RequestBuilder<Void> 
     */
    public class func observedPropertiesPostWithRequestBuilder(observedProperty observedProperty: ObservedProperty) -> RequestBuilder<Void> {
        let path = "/ObservedProperties"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = observedProperty.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sensorsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: SensorsResponse?, error: ErrorType?) -> Void)) {
        sensorsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /Sensors
     - Gets available Sensors, i.e., instruments that can observe a property or phenomenon with the goal of producing an estimate of the value of the property. In some cases,  sensor in this data model can also be seen as the procedure (method, algorithm, or instrument) defined in OGC 07-022r1.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "metadata" : "aeiou",
    "Datastreams@iot.navigationLink" : "aeiou",
    "Datastreams" : [ {
      "resultTime" : "aeiou",
      "Thing@iot.navigationLink" : "aeiou",
      "Sensor@iot.navigationLink" : "aeiou",
      "unitOfMeasure" : "{}",
      "ObservedProperty" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "definition" : "aeiou"
      },
      "description" : "aeiou",
      "phenomenonTime" : "aeiou",
      "ObservedProperty@iot.navigationLink" : "aeiou",
      "observationType" : "aeiou",
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "observedArea" : "{}",
      "Observations@iot.navigationLink" : "aeiou",
      "Observations" : [ {
        "result" : "aeiou",
        "resultTime" : "2000-01-23T04:56:07.000+0000",
        "Datastream" : "",
        "FeatureOfInterest" : {
          "feature" : "aeiou",
          "encodingType" : "aeiou",
          "description" : "aeiou",
          "Observations@iot.navigationLink" : "aeiou",
          "Observations" : [ "" ]
        },
        "phenomenonTime" : "aeiou",
        "validTime" : "2000-01-23T04:56:07.000+0000",
        "FeatureOfInterest@iot.navigationLink" : "aeiou",
        "Datastream@iot.navigationLink" : "aeiou",
        "parameters" : "{}",
        "resultQuality" : "aeiou"
      } ],
      "Thing" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ {
          "@iot.id" : "aeiou",
          "@iot.selLink" : "aeiou",
          "encodingType" : "aeiou",
          "Things" : [ "" ],
          "Things@iot.navigationLink" : "aeiou",
          "description" : "aeiou",
          "location" : "{}",
          "HistoricalLocations" : [ {
            "Thing@iot.navigationLink" : "aeiou",
            "@iot.id" : "aeiou",
            "@iot.selLink" : "aeiou",
            "Locations" : [ "" ],
            "time" : "aeiou",
            "Locations@iot.navigationLink" : "aeiou",
            "Thing" : ""
          } ],
          "HistoricalLocations@iot.navigationLink" : "aeiou"
        } ],
        "description" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "HistoricalLocations" : [ "" ],
        "properties" : "{}",
        "HistoricalLocations@iot.navigationLink" : "aeiou"
      },
      "Sensor" : ""
    } ],
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "encodingType" : "aeiou",
    "description" : "aeiou"
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<SensorsResponse> 
     */
    public class func sensorsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<SensorsResponse> {
        let path = "/Sensors"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SensorsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter sensor: (body) The Observation to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sensorsPost(sensor sensor: Sensor, completion: ((error: ErrorType?) -> Void)) {
        sensorsPostWithRequestBuilder(sensor: sensor).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /Sensors
     - Posts a new sensor description
     
     - parameter sensor: (body) The Observation to add 

     - returns: RequestBuilder<Void> 
     */
    public class func sensorsPostWithRequestBuilder(sensor sensor: Sensor) -> RequestBuilder<Void> {
        let path = "/Sensors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = sensor.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func thingsGet(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil, completion: ((data: ThingsResponse?, error: ErrorType?) -> Void)) {
        thingsGetWithRequestBuilder(orderby: orderby, top: top, skip: skip, filter: filter).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /Things
     - Gets `Things` objects. We use the ITU-T definition, i.e., with regard to the Internet of Things, a thing is an object of         the physical world (physical things) or the information world (virtual things) which is capable of being identified and         integrated into communication networks. (ITU-T Y.2060)<br/>Several query params are supported to filter retrieved data according to different constraints.
     - examples: [{contentType=application/json, example={
  "@iot.nextLink" : "aeiou",
  "@iot.count" : 1.3579000000000001069366817318950779736042022705078125,
  "value" : [ {
    "Datastreams@iot.navigationLink" : "aeiou",
    "Datastreams" : [ {
      "resultTime" : "aeiou",
      "Thing@iot.navigationLink" : "aeiou",
      "Sensor@iot.navigationLink" : "aeiou",
      "unitOfMeasure" : "{}",
      "ObservedProperty" : {
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "definition" : "aeiou"
      },
      "description" : "aeiou",
      "phenomenonTime" : "aeiou",
      "ObservedProperty@iot.navigationLink" : "aeiou",
      "observationType" : "aeiou",
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "observedArea" : "{}",
      "Observations@iot.navigationLink" : "aeiou",
      "Observations" : [ {
        "result" : "aeiou",
        "resultTime" : "2000-01-23T04:56:07.000+0000",
        "Datastream" : "",
        "FeatureOfInterest" : {
          "feature" : "aeiou",
          "encodingType" : "aeiou",
          "description" : "aeiou",
          "Observations@iot.navigationLink" : "aeiou",
          "Observations" : [ "" ]
        },
        "phenomenonTime" : "aeiou",
        "validTime" : "2000-01-23T04:56:07.000+0000",
        "FeatureOfInterest@iot.navigationLink" : "aeiou",
        "Datastream@iot.navigationLink" : "aeiou",
        "parameters" : "{}",
        "resultQuality" : "aeiou"
      } ],
      "Thing" : "",
      "Sensor" : {
        "metadata" : "aeiou",
        "Datastreams@iot.navigationLink" : "aeiou",
        "Datastreams" : [ "" ],
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "encodingType" : "aeiou",
        "description" : "aeiou"
      }
    } ],
    "@iot.id" : "aeiou",
    "@iot.selLink" : "aeiou",
    "Locations" : [ {
      "@iot.id" : "aeiou",
      "@iot.selLink" : "aeiou",
      "encodingType" : "aeiou",
      "Things" : [ "" ],
      "Things@iot.navigationLink" : "aeiou",
      "description" : "aeiou",
      "location" : "{}",
      "HistoricalLocations" : [ {
        "Thing@iot.navigationLink" : "aeiou",
        "@iot.id" : "aeiou",
        "@iot.selLink" : "aeiou",
        "Locations" : [ "" ],
        "time" : "aeiou",
        "Locations@iot.navigationLink" : "aeiou",
        "Thing" : ""
      } ],
      "HistoricalLocations@iot.navigationLink" : "aeiou"
    } ],
    "description" : "aeiou",
    "Locations@iot.navigationLink" : "aeiou",
    "HistoricalLocations" : [ "" ],
    "properties" : "{}",
    "HistoricalLocations@iot.navigationLink" : "aeiou"
  } ]
}}]
     
     - parameter orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby&#x3D;Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed. (optional)
     - parameter skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip&#x3D;5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip&#x3D;2&amp;$top&#x3D;2&amp;$orderby&#x3D;Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt; (optional)
     - parameter filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter&#x3D;Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter&#x3D;Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations (optional)

     - returns: RequestBuilder<ThingsResponse> 
     */
    public class func thingsGetWithRequestBuilder(orderby orderby: String? = nil, top: Int32? = nil, skip: Int32? = nil, filter: Int32? = nil) -> RequestBuilder<ThingsResponse> {
        let path = "/Things"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "$orderby": orderby,
            "$top": top?.encodeToJSON(),
            "$skip": skip?.encodeToJSON(),
            "$filter": filter?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ThingsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter thing: (body) The Thing to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func thingsPost(thing thing: Thing, completion: ((error: ErrorType?) -> Void)) {
        thingsPostWithRequestBuilder(thing: thing).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     - POST /Things
     - Posts a new Thing description
     
     - parameter thing: (body) The Thing to add 

     - returns: RequestBuilder<Void> 
     */
    public class func thingsPostWithRequestBuilder(thing thing: Thing) -> RequestBuilder<Void> {
        let path = "/Things"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = thing.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
